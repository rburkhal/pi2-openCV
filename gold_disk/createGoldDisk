#  descript: Automates the OpenCV & Python Setup for Raspberry Pi	
#    author: Robert C. Burkhall
#      date: June 6, 2015
#
#license(s): http://www.gnu.org/licenses/agpl.txt
#
# credit(s): 
#           Adrian Rosebrock on February 23, 2015 in Raspberry Pi
#           http://www.pyimagesearch.com/2015/02/23/install-opencv-and-python-on-your-raspberry-pi-2-and-b/
#
#	    Mara Pheng - For his Inspiration
#	    The Weather Company
#
# Trap ctrl-c
trap ctrl_c INT

function ctrl_c() {
	echo "\n"
	echo "Exiting Setup..." 
	exit 0
}

function step0() {
	echo '### Step 0: Initialize PI2 & OS to Lastest'
	sudo apt-get -y update
	sudo apt-get -y upgrade
	sudo rpi-update
}

function step1() {
	echo '### Step 1: Install the required developer tools and packages'
	sudo apt-get -y install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev
}

function step2() {
	echo '### Step 2: Install the necessary image I/O packages.'
	echo '# These packages allow you to load various image file formats such as JPEG, PNG, TIFF, etc.'
	sudo apt-get -y install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev
}

function step3() {
	echo '### Step 3: Install the GTK development library'
	echo '# This library is used to build Graphical User Interfaces (GUIs) and is required for the highgui'
	echo '# library of OpenCV which allows you to view images on your screen'
	sudo apt-get -y install libgtk2.0-dev
}

function step4() {
	echo '### Step 4: Install the necessary video I/O packages'
	sudo apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
}

function step5() {
	echo '### Step 5: Install libraries that are used to optimize various operations within OpenCV'
	sudo apt-get -y install libatlas-base-dev gfortran
}

function step6() {
	echo '### Step 6: Install pip'
	echo '### wget https://bootstrap.pypa.io/get-pip.py'
	echo '### sudo python get-pip.py'
	sudo apt-get -y install python-pip python-dev build-essential
	sudo pip install --upgrade pip 
}

function step7() {
	echo '### Step 7: Install  virtualenv  and virtualenvwrapper'
	sudo pip install virtualenv virtualenvwrapper
	 # update ~/.profile
	 re=`grep -q "source /usr/local/bin/virtualenvwrapper.sh" ~/.profile`
	 if [ "$re" -ne "" ]; then
		 cat >> ~/.profile <<<'
		
		 # virtualenv and virtualenvwrapper
		 export WORKON_HOME=$HOME/.virtualenvs
		 source /usr/local/bin/virtualenvwrapper.sh
		 '
		 # Reload Profile
		 source ~/.profile
		 # Create your computer vision virtual environment
		 mkvirtualenv cv
	 else
		echo ""
		#workon cv
	 fi
}
	
function step8() {
	echo '### Step 8: Install the Python 2.7 development tools'
	# OpenCV 2.4 requires python 2.7
	sudo apt-get -y install python2.7-dev
	 # install NumPy since the OpenCV Python bindings represent images as multi-dimensional NumPy arrays
	 pip install numpy
}

function step9() {
	echo '### Step 9: Download OpenCV and unpack it'
	openCV=~/vaSmoke/gold_disk/opencv-2.4.10
	openCVzip="opencv-2.4.10.zip"
 	build="build"
	if [ ! -d "$openCV" ]; then
	 echo "OpenCV Not found"
	 if [ ! -f "$openCVzip" ]; then
	  echo "OpenCV Zip not found, downloanding"
	  wget -O opencv-2.4.10.zip http://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.10/opencv-2.4.10.zip/download
	  unzip opencv-2.4.10.zip
	 else
	  echo "OpenCV Zip exists, Skipping Download"
	  unzip $openCVzip
	 fi
	fi
	cd $openCV
	 # Setup the Build
	 if [ ! -d "$build" ] ; then
	  mkdir build
	 fi
	 cd $build
	 # CMake the projects configuation
	 cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D BUILD_NEW_PYTHON_SUPPORT=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON  -D BUILD_EXAMPLES=ON ..
	 # Make sure youâ€™re in the  cv  virtual environment so OpenCV is compiled 
	 # against the virtual environment Python and NumPy.
	 ## {{ ???? workon cv  ???? }}
	 # Compile OpenCV
	 make
	 # Install OpenCV
	 sudo make install
	 sudo ldconfig
}

function step10() {
	echo '### Step 10: In order to utilize OpenCV within our cv virtual environment, '
	echo '# we first need to sym-link OpenCV into our site-packages  directory'
	cd ~/.virtualenvs/cv/lib/python2.7/site-packages/
	ln -s /usr/local/lib/python2.7/site-packages/cv2.so cv2.so
	ln -s /usr/local/lib/python2.7/site-packages/cv.py cv.py
}

function step11() {
	echo '### Step 11: Give our OpenCV and Python installation a test drive'
	workon cv
	cat > versionChk.py <<<'
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-
	import cv2
	cv2.__version__
	'
	python versionChk.py
}

#
# The step process was developed to assist in fixing issues that are found.
#### Comment out steps that have succeeded
echo `date`
#step1
#step2
#step3
#step4
#step5
#step6
#step7
#step8
step9	# If OpenCV has be compiled and you to update all aspects
step10  # Leaving out these lines will ensure you don't screw up OpenCV in some way
step11

echo '### Step 12: Gold Disk Creation complete @ '`date`
### echo ### Step 13: Show Ending Time

exit 1